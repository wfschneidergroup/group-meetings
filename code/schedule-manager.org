* Group Meeting Schedule
#+tblname:schedule
| Date             | Literature Presenter | Research Presenter |
|------------------+----------------------+--------------------|
| <2015-09-23 Wed> | Prateek              | Quintin            |
| <2015-09-30 Wed> | Sichi                | Solomon            |
| <2015-10-07 Wed> | Onise                | Tae Bum            |
| <2015-10-14 Wed> | Chris, Solomon       | -                  |
| <2015-10-21 Wed> | Hui                  | Sichi              |
| <2015-10-28 Wed> | Quintin              | Anshu              |
| <2015-11-04 Wed> | -                    | Prateek, Chris     |
| <2015-11-11 Wed> | AICHE                | AICHE              |
| <2015-11-18 Wed> | Tae Bum              | Hui                |
| <2015-11-25 Wed> | Anshu                | Onise              |


* Group Emails
#+tblname:emails
| Person    | Email      |
|-----------+------------|
| Prateek   | pmehta1    |
| Sichi     | sli12      |
| Onise     | osharia    |
| Chris     | cpaolucc   |
| Hui       | hli8       |
| Qunitin   | qsherida   |
| Solomon   | sassefa    |
| Anshu     | abajpai1   |
| Schneider | wschneider |


* Generate Directories by date

#+BEGIN_SRC python
from datetime import date, timedelta
import os

if not os.path.exists('literature'):
    os.mkdir('literature')

if not os.path.exists('research'):
    os.mkdir('research')


td = timedelta(days=2)

w1 = date.today() + td

for i in range(10):
    d = w1 + timedelta(days=i*7)
    lit_path = './literature/{0}'.format(d)
    r_path = './research/{0}'.format(d)
    for p in (lit_path, r_path):
        if not os.path.exists(p):
            os.mkdir(p)
#+END_SRC

#+RESULTS:

* Google Calendar

#+BEGIN_SRC python :var schedule=schedule
from quickstart import *
from datetime import datetime, timedelta

def get_calendar_lists():
    page_token = None
    while True:
        credentials = get_credentials()
        http = credentials.authorize(httplib2.Http())
        service = discovery.build('calendar', 'v3', http=http)
    
        calendar_list = service.calendarList().list(pageToken=page_token).execute()
        for calendar_list_entry in calendar_list['items']:
            print calendar_list_entry['id'], calendar_list_entry['summary']
        page_token = calendar_list.get('nextPageToken')
        if not page_token:
            break

def get_emails(lit, research):

    emails = {'Prateek': 'pmehta1@nd.edu',
              'Onise': 'osharia@nd.edu',
              'Chris': 'cpaolucc@nd.edu',
              'Hui': 'hli8@nd.edu',
              'Sichi': 'sli12@nd.edu',
              'Tae Bum': 'tlee8@nd.edu',
              'Anshumaan': 'abajpai1@nd.edu',
              'Solomon': 'sassefa@nd.edu',
              'Quintin': 'qsherida@nd.edu'}

    attendees, email_list = [], []
    if ',' in lit:
        email_list.extend(lit.split(','))
    else:
        email_list.append(lit)
        
    if ',' in research:
        email_list.extend(research.split(','))
    else:
        email_list.append(research)

    for a in email_list:
        try:
            a = a.strip()
            attendees.append({'email':emails[a]})
        except(KeyError):
            pass
    return attendees
    
def create_meeting(start, end, lit, research):
    """
    Creates a meeting event
    """
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('calendar', 'v3', http=http)

    attendees = get_emails(lit, research)

    event = {
        'summary': 'Group Meeting. L:{0}, R:{1}'.format(lit, research),
        'location': 'Comsel Meeting Area, Notre Dame, IN',
        'description': 'Hear more about the exciting research in the Schneider Group. \nLiterature Presenter: {0} \nResearch Presenter: {1}'.format(lit, research),
        'start': {
            'dateTime': start,
            'timeZone': 'America/New_York',
        },
        'end': {
            'dateTime': end,
            'timeZone': 'America/New_York',
        },
        'attendees': attendees,
        'reminders': {
            'useDefault': False,
            'overrides': [
                {'method': 'email', 'minutes': 5 * 24 * 60},
            ],
        },
    }

    event = service.events().insert(calendarId='b3e5dnq5qj5dlmov44dplttt6s@group.calendar.google.com', body=event).execute()
    #print 'Event created: %s' % (event.get('htmlLink'))



# Start Date
s = datetime(2015, 9, 23, 14, 0,0,0)

e = datetime(2015, 9, 23, 15, 0,0,0)

get_calendar_lists()

for i, entry in enumerate(schedule):
    d, lit, research = entry
    sdate = s + timedelta(i * 7)
    edate = e + timedelta(i * 7)
    start = sdate.isoformat('T')
    end = edate.isoformat('T')
    create_meeting(start, end, lit, research)

#+END_SRC

#+RESULTS:
: ncu6uits0eoefjtchmp6ktatak@group.calendar.google.com Schneider Group Meetings
: prateekmehta.in@gmail.com prateekmehta.in@gmail.com
: pmehta1@nd.edu pmehta1@nd.edu
: gradprofdev@gmail.com Professional Development: All
: b3e5dnq5qj5dlmov44dplttt6s@group.calendar.google.com Group Meeting Schedule
: #contacts@group.v.calendar.google.com Birthdays
: en.usa#holiday@group.v.calendar.google.com Holidays in United States
: p#weather@group.v.calendar.google.com Weather

